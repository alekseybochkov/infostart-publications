/*
  1. Define the database that should be used as a local data store.
  2. Schedule this sproc as a SQL Agent job that runs every minute.
  3. The loop inside the sproc is infinite.
  4. Pause between samples is 15 seconds - change it if you need data with different granularity.
*/
USE [DBA] --local database for SQL monitoring that is always available and doesn't belong to the AlwaysOn availability group
GO
CREATE OR ALTER PROCEDURE [Monitor].[CollectWaitStatistics]
AS
SET NOCOUNT ON;

IF OBJECT_ID('Monitor.CollectedWaitStatistics') IS NULL
BEGIN
	CREATE TABLE [Monitor].[CollectedWaitStatistics](
		[CollectedDateTime] datetime DEFAULT (GETDATE()) NOT NULL,
		[WaitType] [varchar](60) NULL,
		[WaitSec] [decimal](16, 2) NULL,
		[WaitCount] [bigint] NULL,
		[ServerName] [nvarchar](128) NOT NULL DEFAULT (@@servername) 
	);
	CREATE CLUSTERED INDEX CIX_Monitor_CollectedWaitStatistics ON [Monitor].[CollectedWaitStatistics] ([CollectedDateTime]);
END

DROP TABLE IF EXISTS #tempStatsPrevious;
DROP TABLE IF EXISTS #tempStatsNow;
	
CREATE TABLE #tempStatsPrevious (
	[wait_type] [nvarchar](60) NOT NULL,
	[WaitS] [numeric](26, 6) NULL,
	[WaitCount] [bigint] NOT NULL
)
	
CREATE TABLE #tempStatsNow (
	[wait_type] [nvarchar](60) NOT NULL,
	[WaitS] [numeric](26, 6) NULL,
	[WaitCount] [bigint] NOT NULL
)

INSERT INTO #tempStatsPrevious ([wait_type], [WaitS], [WaitCount])
SELECT 
	wait_type, 
	wait_time_ms/ 1000.0 AS [WaitS],
	waiting_tasks_count AS [WaitCount]
FROM sys.dm_os_wait_stats WITH (NOLOCK)
WHERE [wait_type] NOT IN (
	N'BROKER_EVENTHANDLER', N'BROKER_RECEIVE_WAITFOR', N'BROKER_TASK_STOP',
	N'BROKER_TO_FLUSH', N'BROKER_TRANSMITTER', N'CHECKPOINT_QUEUE',
	N'CHKPT', N'CLR_AUTO_EVENT', N'CLR_MANUAL_EVENT', N'CLR_SEMAPHORE',
	N'DBMIRROR_DBM_EVENT', N'DBMIRROR_EVENTS_QUEUE', N'DBMIRROR_WORKER_QUEUE',
	N'DBMIRRORING_CMD', N'DIRTY_PAGE_POLL', N'DISPATCHER_QUEUE_SEMAPHORE',
	N'EXECSYNC', N'FSAGENT', N'FT_IFTS_SCHEDULER_IDLE_WAIT', N'FT_IFTSHC_MUTEX',
	N'HADR_CLUSAPI_CALL', N'HADR_FILESTREAM_IOMGR_IOCOMPLETION', N'HADR_LOGCAPTURE_WAIT', 
	N'HADR_NOTIFICATION_DEQUEUE', N'HADR_TIMER_TASK', N'HADR_WORK_QUEUE',
	N'KSOURCE_WAKEUP', N'LAZYWRITER_SLEEP', N'LOGMGR_QUEUE', 
	N'MEMORY_ALLOCATION_EXT', N'ONDEMAND_TASK_QUEUE',
	N'PREEMPTIVE_HADR_LEASE_MECHANISM', N'PREEMPTIVE_SP_SERVER_DIAGNOSTICS',
	N'PREEMPTIVE_OS_LIBRARYOPS', N'PREEMPTIVE_OS_COMOPS', N'PREEMPTIVE_OS_CRYPTOPS',
	N'PREEMPTIVE_OS_PIPEOPS', N'PREEMPTIVE_OS_AUTHENTICATIONOPS',
	N'PREEMPTIVE_OS_GENERICOPS', N'PREEMPTIVE_OS_VERIFYTRUST',
	N'PREEMPTIVE_OS_FILEOPS', N'PREEMPTIVE_OS_DEVICEOPS', N'PREEMPTIVE_OS_QUERYREGISTRY',
	N'PREEMPTIVE_OS_WRITEFILE',
	N'PREEMPTIVE_XE_CALLBACKEXECUTE', N'PREEMPTIVE_XE_DISPATCHER',
	N'PREEMPTIVE_XE_GETTARGETSTATE', N'PREEMPTIVE_XE_SESSIONCOMMIT',
	N'PREEMPTIVE_XE_TARGETINIT', N'PREEMPTIVE_XE_TARGETFINALIZE',
	N'PWAIT_ALL_COMPONENTS_INITIALIZED', N'PWAIT_DIRECTLOGCONSUMER_GETNEXT',
	N'QDS_PERSIST_TASK_MAIN_LOOP_SLEEP',
	N'QDS_ASYNC_QUEUE',
	N'QDS_CLEANUP_STALE_QUERIES_TASK_MAIN_LOOP_SLEEP', N'REQUEST_FOR_DEADLOCK_SEARCH',
	N'RESOURCE_QUEUE', N'SERVER_IDLE_CHECK', N'SLEEP_BPOOL_FLUSH', N'SLEEP_DBSTARTUP',
	N'SLEEP_DCOMSTARTUP', N'SLEEP_MASTERDBREADY', N'SLEEP_MASTERMDREADY',
	N'SLEEP_MASTERUPGRADED', N'SLEEP_MSDBSTARTUP', N'SLEEP_SYSTEMTASK', N'SLEEP_TASK',
	N'SLEEP_TEMPDBSTARTUP', N'SNI_HTTP_ACCEPT', N'SP_SERVER_DIAGNOSTICS_SLEEP',
	N'SQLTRACE_BUFFER_FLUSH', N'SQLTRACE_INCREMENTAL_FLUSH_SLEEP', N'SQLTRACE_WAIT_ENTRIES',
	N'WAIT_FOR_RESULTS', N'WAITFOR', N'WAITFOR_TASKSHUTDOWN', N'WAIT_XTP_HOST_WAIT',
	N'WAIT_XTP_OFFLINE_CKPT_NEW_LOG', N'WAIT_XTP_CKPT_CLOSE', N'WAIT_XTP_RECOVERY',
	N'XE_BUFFERMGR_ALLPROCESSED_EVENT', N'XE_DISPATCHER_JOIN',
	N'XE_DISPATCHER_WAIT', N'XE_LIVE_TARGET_TVF', N'XE_TIMER_EVENT')
AND wait_time_ms/ 1000.0 > 0

WHILE (1 = 1)
BEGIN

	WAITFOR DELAY '00:00:15' --Wait 15 seconds before getting new waits sample

	TRUNCATE TABLE #tempStatsNow;

	INSERT INTO #tempStatsNow ([wait_type], [WaitS], [WaitCount])
	SELECT 
		wait_type, 
		wait_time_ms/ 1000.0 AS [WaitS],
		waiting_tasks_count AS [WaitCount]
	FROM sys.dm_os_wait_stats WITH (NOLOCK)
	WHERE [wait_type] NOT IN (
		N'BROKER_EVENTHANDLER', N'BROKER_RECEIVE_WAITFOR', N'BROKER_TASK_STOP',
		N'BROKER_TO_FLUSH', N'BROKER_TRANSMITTER', N'CHECKPOINT_QUEUE',
		N'CHKPT', N'CLR_AUTO_EVENT', N'CLR_MANUAL_EVENT', N'CLR_SEMAPHORE',
		N'DBMIRROR_DBM_EVENT', N'DBMIRROR_EVENTS_QUEUE', N'DBMIRROR_WORKER_QUEUE',
		N'DBMIRRORING_CMD', N'DIRTY_PAGE_POLL', N'DISPATCHER_QUEUE_SEMAPHORE',
		N'EXECSYNC', N'FSAGENT', N'FT_IFTS_SCHEDULER_IDLE_WAIT', N'FT_IFTSHC_MUTEX',
		N'HADR_CLUSAPI_CALL', N'HADR_FILESTREAM_IOMGR_IOCOMPLETION', N'HADR_LOGCAPTURE_WAIT', 
		N'HADR_NOTIFICATION_DEQUEUE', N'HADR_TIMER_TASK', N'HADR_WORK_QUEUE',
		N'KSOURCE_WAKEUP', N'LAZYWRITER_SLEEP', N'LOGMGR_QUEUE', 
		N'MEMORY_ALLOCATION_EXT', N'ONDEMAND_TASK_QUEUE',
		N'PREEMPTIVE_HADR_LEASE_MECHANISM', N'PREEMPTIVE_SP_SERVER_DIAGNOSTICS',
		N'PREEMPTIVE_OS_LIBRARYOPS', N'PREEMPTIVE_OS_COMOPS', N'PREEMPTIVE_OS_CRYPTOPS',
		N'PREEMPTIVE_OS_PIPEOPS', N'PREEMPTIVE_OS_AUTHENTICATIONOPS',
		N'PREEMPTIVE_OS_GENERICOPS', N'PREEMPTIVE_OS_VERIFYTRUST',
		N'PREEMPTIVE_OS_FILEOPS', N'PREEMPTIVE_OS_DEVICEOPS', N'PREEMPTIVE_OS_QUERYREGISTRY',
		N'PREEMPTIVE_OS_WRITEFILE',
		N'PREEMPTIVE_XE_CALLBACKEXECUTE', N'PREEMPTIVE_XE_DISPATCHER',
		N'PREEMPTIVE_XE_GETTARGETSTATE', N'PREEMPTIVE_XE_SESSIONCOMMIT',
		N'PREEMPTIVE_XE_TARGETINIT', N'PREEMPTIVE_XE_TARGETFINALIZE',
		N'PWAIT_ALL_COMPONENTS_INITIALIZED', N'PWAIT_DIRECTLOGCONSUMER_GETNEXT',
		N'QDS_PERSIST_TASK_MAIN_LOOP_SLEEP',
		N'QDS_ASYNC_QUEUE',
		N'QDS_CLEANUP_STALE_QUERIES_TASK_MAIN_LOOP_SLEEP', N'REQUEST_FOR_DEADLOCK_SEARCH',
		N'RESOURCE_QUEUE', N'SERVER_IDLE_CHECK', N'SLEEP_BPOOL_FLUSH', N'SLEEP_DBSTARTUP',
		N'SLEEP_DCOMSTARTUP', N'SLEEP_MASTERDBREADY', N'SLEEP_MASTERMDREADY',
		N'SLEEP_MASTERUPGRADED', N'SLEEP_MSDBSTARTUP', N'SLEEP_SYSTEMTASK', N'SLEEP_TASK',
		N'SLEEP_TEMPDBSTARTUP', N'SNI_HTTP_ACCEPT', N'SP_SERVER_DIAGNOSTICS_SLEEP',
		N'SQLTRACE_BUFFER_FLUSH', N'SQLTRACE_INCREMENTAL_FLUSH_SLEEP', N'SQLTRACE_WAIT_ENTRIES',
		N'WAIT_FOR_RESULTS', N'WAITFOR', N'WAITFOR_TASKSHUTDOWN', N'WAIT_XTP_HOST_WAIT',
		N'WAIT_XTP_OFFLINE_CKPT_NEW_LOG', N'WAIT_XTP_CKPT_CLOSE', N'WAIT_XTP_RECOVERY',
		N'XE_BUFFERMGR_ALLPROCESSED_EVENT', N'XE_DISPATCHER_JOIN',
		N'XE_DISPATCHER_WAIT', N'XE_LIVE_TARGET_TVF', N'XE_TIMER_EVENT')
	AND wait_time_ms/ 1000.0 > 0

	INSERT INTO [Monitor].[CollectedWaitStatistics] ([WaitType], [WaitSec], [WaitCount])
	SELECT 
		[wait_type],
		SUM([WaitS]),
		SUM([WaitCount])
	FROM (SELECT [wait_type]
			  ,[WaitS]
			  ,[WaitCount]
		FROM #tempStatsNow
		UNION ALL 
		SELECT [wait_type]
			  ,-[WaitS]
			  ,-[WaitCount]
		FROM #tempStatsPrevious) T
	GROUP BY [wait_type]
	HAVING SUM([WaitS]) > 0.1 --OR SUM([WaitCount]) > 0 --ignore waits that are smaller than 0.1 sec

	TRUNCATE TABLE #tempStatsPrevious;

	INSERT INTO #tempStatsPrevious
	SELECT * FROM #tempStatsNow;

	TRUNCATE TABLE #tempStatsNow;
    
    /************************************************************************/
    -- Delete records older than 14 days
    WHILE EXISTS(SELECT TOP 1 1 FROM [Monitor].[CollectedWaitStatistics] WHERE CollectedDateTime <= DATEADD(day, -14, GETDATE()))
    BEGIN
        WITH OldRecords AS (SELECT TOP 1000 CollectedDateTime FROM [Monitor].[CollectedWaitStatistics] WHERE CollectedDateTime <= DATEADD(day, -14, GETDATE()))
        DELETE FROM OldRecords;
    END

END
